

import numpy as np
import pandas as pd
from proteinko import model_distribution, encode_sequence
from pyaaisc import Aaindex
from collections import Counter


Human_data='Final_merged_human_43_0.4.csv'
df_human_data= pd.read_csv(All_data)

df_human_data=df_All_data.drop(['Accession'],axis=1)
df_human_data=df_All_data.drop(["Position"], axis=1)
labels = df_human_data['label']
df_human_data = df_All_data.drop('label', axis=1)
label_counts = Counter(labels)
print(label_counts)

encoding_schemes = {
    'ARGP820101': Aaindex().get('ARGP820101', dbkey='aaindex1').index_data,
    'BIGC670101': Aaindex().get('BIGC670101', dbkey='aaindex1').index_data,
    'BROC820101': Aaindex().get('BROC820101', dbkey='aaindex1').index_data,
    'DAYM780101': Aaindex().get('DAYM780101', dbkey='aaindex1').index_data,
    'EISD840101': Aaindex().get('EISD840101', dbkey='aaindex1').index_data,
    'FAUJ830101': Aaindex().get('FAUJ830101', dbkey='aaindex1').index_data,
    'FAUJ880108': Aaindex().get('FAUJ880108', dbkey='aaindex1').index_data,
    'FASG760102': Aaindex().get('FASG760102', dbkey='aaindex1').index_data,
    'FASG760101': Aaindex().get('FASG760101', dbkey='aaindex1').index_data,
    'HARY940101': Aaindex().get('HARY940101', dbkey='aaindex1').index_data,
    'GRAR740102': Aaindex().get('GRAR740102', dbkey='aaindex1').index_data,
    'HUTJ700103': Aaindex().get('HUTJ700103', dbkey='aaindex1').index_data,
    'GRAR740102': Aaindex().get('GRAR740102', dbkey='aaindex1').index_data,
    'HARY940101': Aaindex().get('HARY940101', dbkey='aaindex1').index_data,
    'HUTJ700103': Aaindex().get('HUTJ700103', dbkey='aaindex1').index_data,
    'JUKT750101': Aaindex().get('JUKT750101', dbkey='aaindex1').index_data,
    'KLEP840101': Aaindex().get('KLEP840101', dbkey='aaindex1').index_data,
    'KRIW790103': Aaindex().get('KRIW790103', dbkey='aaindex1').index_data,
    'KRIW790102': Aaindex().get('KRIW790102', dbkey='aaindex1').index_data,
    'VELV850101': Aaindex().get('FAUJ830101', dbkey='aaindex1').index_data,

}

def encode_sequence(sequence, encoding_schemes):
    encoded_sequences = []
    for scheme_name, encoding_scheme in encoding_schemes.items():
        encoded_sequence = []
        for aa in sequence:
            if aa in encoding_scheme:
                encoded_sequence.append(encoding_scheme[aa])
            else:
                encoded_sequence.append(0)  # Replace 'X' with 0 (or any default value)
        encoded_sequences.append(encoded_sequence)
    return encoded_sequences

df_human_data['Encoded_Sequence'] = df_human_data['sequence'].apply(lambda seq: encode_sequence(seq, encoding_schemes))
encoded_sequences= df_human_data[['Encoded_Sequence']]
encoded_array = np.array(encoded_sequences['Encoded_Sequence'].tolist())
merged_array = np.array([np.concatenate(row) for row in encoded_array])
merged_df = pd.DataFrame(merged_array)
merged_df.to_csv('/content/drive/MyDrive/python notebooks PTM/Human_AAindex_encoding.csv', index=False)
